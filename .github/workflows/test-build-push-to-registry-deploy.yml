name: Test - Build - Push to Registry - Deploy

on:
  push:
    branches: [master]
    paths-ignore:
      - .github/**
      - README.md
      - "**/README.md"
      - deploy/**
      - img/**

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build all modules and install to local Maven repository
        run: mvn install -DskipTests

      - name: Run tests for all modules
        run: mvn verify -pl backend,session,logging,messaging,shared

  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_storage: ${{ steps.detect.outputs.changed_storage }}
      changed_shared: ${{ steps.detect.outputs.changed_shared }}
      changed_modules: ${{ steps.detect.outputs.changed_modules }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Detect changed modules
        id: detect
        run: |
          BEFORE_SHA="${{ github.event.before }}"
          AFTER_SHA="${{ github.event.after }}"
          
          echo "Comparing changes from $BEFORE_SHA to $AFTER_SHA"
          
          CHANGED_FILES=$(git diff --name-only $BEFORE_SHA $AFTER_SHA)
          
          # Extract module names for storage
          CHANGED_STORAGE=$(echo "$CHANGED_FILES" | grep -E "^storage/" | awk -F'/' '{print $2}' | sort -u | tr '\n' ' ' || true)
          
          # Extract module names for shared (only the module name, not the file path)
          CHANGED_SHARED=$(echo "$CHANGED_FILES" | grep -E "^shared" | awk -F'/' '{print $1}' | sort -u | tr '\n' ' ' || true)
          
          # Extract module names for backend, session, logging, messaging (just the module names)
          CHANGED_MODULES=$(echo "$CHANGED_FILES" | grep -E "^(backend|session|logging|messaging)/" | awk -F'/' '{print $1}' | sort -u | tr '\n' ' ' || true)
          
          echo "changed storage: $CHANGED_STORAGE"
          echo "changed shared: $CHANGED_SHARED"
          echo "changed modules: $CHANGED_MODULES"
          
          echo "changed_storage=${CHANGED_STORAGE}" >> "$GITHUB_OUTPUT"
          echo "changed_shared=${CHANGED_SHARED}" >> "$GITHUB_OUTPUT"
          echo "changed_modules=${CHANGED_MODULES}" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    needs: [test, detect-changes]
    outputs:
      storage_pushed_images: ${{ steps.build-storage.outputs.pushed_images }}
      build_all_pushed_images: ${{ steps.build-all-modules.outputs.pushed_images }}
      build_specific_pushed_images: ${{ steps.build-specific-modules.outputs.pushed_images }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check and build Docker images for storage modules
        id: build-storage
        if: ${{ needs.detect-changes.outputs.changed_storage != '' }}
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          pushed_images=""
          
          current_dir="$(pwd)"
          echo "::debug::current dir: $current_dir"
          for module in ${{ needs.detect-changes.outputs.changed_storage }}; do
              cd "$current_dir/storage/$module"
              echo "::debug::Current directory after cd: $(pwd)"
          
              version="$(source version && echo "$VERSION")"
              IMAGE_NAME="ghcr.io/$REPO_NAME/storage/$module:${{ github.sha }}"
              IMAGE_VERSION_NAME="ghcr.io/$REPO_NAME/storage/$module:v${version}"
              echo "::debug::Building and pushing $IMAGE_NAME aka $IMAGE_VERSION_NAME"
          
              ./build.sh $GITHUB_SHA
          
              docker tag survey-$module-postgres:$GITHUB_SHA $IMAGE_NAME
              docker tag survey-$module-postgres:$GITHUB_SHA $IMAGE_VERSION_NAME
              
              docker push $IMAGE_NAME
              docker push $IMAGE_VERSION_NAME
              
              pushed_images+="$IMAGE_NAME "
              pushed_images+="$IMAGE_VERSION_NAME "
          done
          
          echo "pushed_images=${pushed_images}" >> "$GITHUB_OUTPUT"

      - name: Check and build Docker images for shared and dependent modules
        id: build-all-modules
        if: ${{ needs.detect-changes.outputs.changed_shared != '' }}
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          pushed_images=""
          extract_version() {
            version="$(cat pom.xml 2>/dev/null | grep version | sed -n '1p' | awk -F'[<>]' '{print $3}')"
            echo "$version"
          }
  
  
          current_dir="$(pwd)"
          echo "::debug::current dir: $current_dir"
          for module in backend session logging; do
              cd "$current_dir/$module"
              echo "::debug::Current directory after cd: $(pwd)"
  
              version=$(extract_version)
              IMAGE_NAME="ghcr.io/$REPO_NAME/$module:${{ github.sha }}"
              IMAGE_VERSION_NAME="ghcr.io/$REPO_NAME/$module:v${version}"
              echo "::debug::building: $IMAGE_NAME aka $IMAGE_VERSION_NAME"
  
              # Pass the SHA as VERSION to the build.sh script
              ./build.sh $GITHUB_SHA
  
              # Tag the locally built image before pushing it
              docker tag survey-$module:$GITHUB_SHA "$IMAGE_NAME"
              docker tag survey-$module:$GITHUB_SHA "$IMAGE_VERSION_NAME"
              # Now push the tagged image
              docker push "$IMAGE_NAME"
              docker push "$IMAGE_VERSION_NAME"
              pushed_images+="$IMAGE_NAME "
              pushed_images+="$IMAGE_VERSION_NAME "
          done
          
          echo "pushed_images=${pushed_images}" >> "$GITHUB_OUTPUT"

      - name: Check and build Docker images for specific modules
        id: build-specific-modules
        # only build if changed_shared is empty i.e. we won't already have a full rebuild
        if: ${{ (needs.detect-changes.outputs.changed_modules != '') && (needs.detect-changes.outputs.changed_shared == '') }}
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          pushed_images=""
          extract_version() {
            version="$(cat pom.xml 2>/dev/null | grep version | sed -n '1p' | awk -F'[<>]' '{print $3}')"
            echo "$version"
          }
          
          current_dir="$(pwd)"
          for module in ${{ needs.detect-changes.outputs.changed_modules }}; do
              cd "$current_dir/$module"
              version=$(extract_version)
              
              IMAGE_NAME="ghcr.io/$REPO_NAME/$module:${{ github.sha }}"
              IMAGE_VERSION_NAME="ghcr.io/$REPO_NAME/$module:v${version}"
              
              echo "Building $IMAGE_NAME aka $IMAGE_VERSION_NAME"
              ./build.sh $GITHUB_SHA
            
              # Tag the locally built image before pushing it
              docker tag survey-$module:$GITHUB_SHA "$IMAGE_NAME"
              docker tag survey-$module:$GITHUB_SHA "$IMAGE_VERSION_NAME"
              
              # Now push the tagged image
              docker push "$IMAGE_NAME"
              docker push "$IMAGE_VERSION_NAME"
            
              pushed_images+="$IMAGE_NAME "
              pushed_images+="$IMAGE_VERSION_NAME "
          done
          
          echo "pushed_images=${pushed_images}" >> "$GITHUB_OUTPUT"

  deploy:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: execute-remote-deploy-command
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: 25m
          script: |
            # Explicitly set variables from build outputs
            STORAGE_PUSHED_IMAGES='${{ needs.build.outputs.storage_pushed_images }}'
            BUILD_ALL_PUSHED_IMAGES='${{ needs.build.outputs.build_all_pushed_images }}'
            BUILD_SPECIFIC_PUSHED_IMAGES='${{ needs.build.outputs.build_specific_pushed_images }}'
            
            cd ${{ vars.WORKING_DIRECTORY }}
            is_not_empty() { #helper fn
              [[ -n "$1" ]]
            }
            
            find_service_name() {
                input="$1"
                
                if [[ "$input" == *"storage/backend"* ]]; then
                echo "survey-app_survey-backend-postgres"
                elif [[ "$input" == *"storage/logging"* ]]; then
                echo "survey-app_survey-logging-postgres"
                elif [[ "$input" == *"storage/session"* ]]; then
                echo "survey-app_survey-session-postgres"
                elif [[ "$input" == *"backend"* ]]; then
                echo "survey-app_backend"
                elif [[ "$input" == *"logging"* ]]; then
                echo "survey-app_logging"
                elif [[ "$input" == *"session"* ]]; then
                echo "survey-app_session"
                else
                echo "no-service-found-on-workflow"
                fi
            }
            
            echo "::debug:: variables:  $STORAGE_PUSHED_IMAGES, $BUILD_ALL_PUSHED_IMAGES, $BUILD_SPECIFIC_PUSHED_IMAGES"
            
            if is_not_empty "$STORAGE_PUSHED_IMAGES"; then
                images=($STORAGE_PUSHED_IMAGES)
                for image in "${images[@]}"; do
                    docker pull "$image"
                    service_name="$(find_service_name "$image")"
                    docker service update --image "$image" --force "$service_name"
                done
            fi
  
  
            if is_not_empty "$BUILD_ALL_PUSHED_IMAGES"; then
                images=($BUILD_ALL_PUSHED_IMAGES)
                for image in "${images[@]}"; do
                    docker pull $image
                    echo "::debug:: pulled $image"
                    echo "pulled $image" >> pull_history.txt
                    service_name="$(find_service_name "$image")"
                    echo "::debug:: service_name to update: $service_name"
                    docker service update --image "$image" --force "$service_name"
                done
            elif is_not_empty "$BUILD_SPECIFIC_PUSHED_IMAGES"; then
                images=($BUILD_SPECIFIC_PUSHED_IMAGES)
                for image in "${images[@]}"; do
                    docker pull $image
                    echo "::debug:: pulled $image"
                    echo "pulled $image" >> pull_history.txt
                    service_name="$(find_service_name "$image")"
                    echo "::debug:: service_name to update: $service_name"
                    docker service update --image "$image" --force "$service_name"
                done
            fi
          
